diff -Nur a/DOCS/man/options.rst b/DOCS/man/options.rst
--- a/DOCS/man/options.rst	2023-07-24 01:10:36.000000000 +0800
+++ b/DOCS/man/options.rst	2023-09-15 19:44:54.135159475 +0800
@@ -3381,6 +3381,10 @@
     ``--hwdec=mediacodec`` for direct rendering using MediaCodec, or with
     ``--vo=gpu --gpu-context=android`` (with or without ``--hwdec=mediacodec``).
 
+    If compiled with MoltenVK on iOS/tvOS/macOS, the ID is interpreted as
+    ``CAMetalLayer *``. Pass it as a value cast to ``intptr_t``. Use with
+    ``--vo=gpu --gpu-api=vulkan --gpu-context=moltenvk``
+
 ``--no-window-dragging``
     Don't move the window when clicking on it and moving the mouse pointer.
 
diff -Nur a/meson.build b/meson.build
--- a/meson.build	2023-07-24 01:10:36.000000000 +0800
+++ b/meson.build	2023-09-15 19:46:45.421885442 +0800
@@ -1288,6 +1288,12 @@
     sources += files('video/out/vulkan/context_display.c')
 endif
 
+features += {'moltenvk': cc.has_header('MoltenVK/mvk_vulkan.h',
+                                               dependencies: [vulkan])}
+
+if features['moltenvk']
+    sources += files('video/out/vulkan/context_moltenvk.m')
+endif
 
 # hwaccel
 ffnvcodec = dependency('ffnvcodec', version: '>= 11.1.5.1', required: false)
diff -Nur a/video/out/gpu/context.c b/video/out/gpu/context.c
--- a/video/out/gpu/context.c	2023-07-24 01:10:36.000000000 +0800
+++ b/video/out/gpu/context.c	2023-09-15 19:48:20.940582347 +0800
@@ -51,6 +51,7 @@
 extern const struct ra_ctx_fns ra_ctx_vulkan_xlib;
 extern const struct ra_ctx_fns ra_ctx_vulkan_android;
 extern const struct ra_ctx_fns ra_ctx_vulkan_display;
+extern const struct ra_ctx_fns ra_ctx_vulkan_moltenvk;
 
 /* Direct3D 11 */
 extern const struct ra_ctx_fns ra_ctx_d3d11;
@@ -113,6 +114,9 @@
 #if HAVE_VK_KHR_DISPLAY
     &ra_ctx_vulkan_display,
 #endif
+#if HAVE_MOLTENVK
+    &ra_ctx_vulkan_moltenvk,
+#endif
 #endif
 
 /* No API contexts: */
diff -Nur a/video/out/vulkan/common.h b/video/out/vulkan/common.h
--- a/video/out/vulkan/common.h	2023-07-24 01:10:36.000000000 +0800
+++ b/video/out/vulkan/common.h	2023-09-15 19:44:54.136940397 +0800
@@ -22,6 +22,9 @@
 #if HAVE_WIN32_DESKTOP
 #define VK_USE_PLATFORM_WIN32_KHR
 #endif
+#if HAVE_MOLTENVK
+#include <MoltenVK/mvk_vulkan.h>
+#endif
 
 #include <libplacebo/vulkan.h>
 
diff -Nur a/video/out/vulkan/context_moltenvk.m b/video/out/vulkan/context_moltenvk.m
--- a/video/out/vulkan/context_moltenvk.m	1970-01-01 08:00:00.000000000 +0800
+++ b/video/out/vulkan/context_moltenvk.m	2023-09-15 19:44:54.137106185 +0800
@@ -0,0 +1,96 @@
+/*
+ * This file is part of mpv.
+ *
+ * mpv is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * mpv is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with mpv.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <CoreGraphics/CoreGraphics.h>
+#include <QuartzCore/CAMetalLayer.h>
+#include <MoltenVK/mvk_vulkan.h>
+
+#include "common.h"
+#include "context.h"
+#include "utils.h"
+
+struct priv {
+    struct mpvk_ctx vk;
+    CAMetalLayer *layer;
+};
+
+static void moltenvk_uninit(struct ra_ctx *ctx)
+{
+    struct priv *p = ctx->priv;
+    ra_vk_ctx_uninit(ctx);
+    mpvk_uninit(&p->vk);
+}
+
+static bool moltenvk_init(struct ra_ctx *ctx)
+{
+    struct priv *p = ctx->priv = talloc_zero(ctx, struct priv);
+    struct mpvk_ctx *vk = &p->vk;
+    int msgl = ctx->opts.probing ? MSGL_V : MSGL_ERR;
+
+    if (ctx->vo->opts->WinID == -1) {
+        MP_MSG(ctx, msgl, "WinID missing\n");
+        goto fail;
+    }
+
+    if (!mpvk_init(vk, ctx, VK_EXT_METAL_SURFACE_EXTENSION_NAME))
+        goto fail;
+
+    p->layer = (__bridge CAMetalLayer *)(intptr_t)ctx->vo->opts->WinID;
+    VkMetalSurfaceCreateInfoEXT info = {
+         .sType = VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT,
+         .pLayer = p->layer,
+    };
+
+    struct ra_vk_ctx_params params = {0};
+
+    VkInstance inst = vk->vkinst->instance;
+    VkResult res = vkCreateMetalSurfaceEXT(inst, &info, NULL, &vk->surface);
+    if (res != VK_SUCCESS) {
+        MP_MSG(ctx, msgl, "Failed creating MoltenVK surface\n");
+        goto fail;
+    }
+
+    if (!ra_vk_ctx_init(ctx, vk, params, VK_PRESENT_MODE_FIFO_KHR))
+        goto fail;
+
+    return true;
+fail:
+    moltenvk_uninit(ctx);
+    return false;
+}
+
+static bool moltenvk_reconfig(struct ra_ctx *ctx)
+{
+    struct priv *p = ctx->priv;
+    CGSize s = p->layer.drawableSize;
+    ra_vk_ctx_resize(ctx, s.height, s.height);
+    return true;
+}
+
+static int moltenvk_control(struct ra_ctx *ctx, int *events, int request, void *arg)
+{
+    return VO_NOTIMPL;
+}
+
+const struct ra_ctx_fns ra_ctx_vulkan_moltenvk = {
+    .type           = "vulkan",
+    .name           = "moltenvk",
+    .reconfig       = moltenvk_reconfig,
+    .control        = moltenvk_control,
+    .init           = moltenvk_init,
+    .uninit         = moltenvk_uninit,
+};
